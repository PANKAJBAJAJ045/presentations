// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace _13JsonColumns.Migrations
{
    [DbContext(typeof(BlogsContext))]
    [Migration("20221111175054_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JsonColumns.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("JsonColumns.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("JsonColumns.Models.Commit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommittedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostUpdateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostUpdateId");

                    b.ToTable("Commit");
                });

            modelBuilder.Entity("JsonColumns.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MetadataId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogId");

                    b.HasIndex("MetadataId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Post");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("JsonColumns.Models.PostMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PostMetadata");
                });

            modelBuilder.Entity("JsonColumns.Models.PostUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PostMetadataId")
                        .HasColumnType("int");

                    b.Property<string>("PostedFrom")
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostMetadataId");

                    b.ToTable("PostUpdate");
                });

            modelBuilder.Entity("JsonColumns.Models.SearchTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("PostMetadataId")
                        .HasColumnType("int");

                    b.Property<string>("Term")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostMetadataId");

                    b.ToTable("SearchTerm");
                });

            modelBuilder.Entity("JsonColumns.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("JsonColumns.Models.Visits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Browsers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("PostMetadataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostMetadataId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<int>("PostsId")
                        .HasColumnType("int");

                    b.Property<string>("TagsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("JsonColumns.Models.FeaturedPost", b =>
                {
                    b.HasBaseType("JsonColumns.Models.Post");

                    b.Property<string>("PromoText")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("FeaturedPost");
                });

            modelBuilder.Entity("JsonColumns.Models.Author", b =>
                {
                    b.OwnsOne("JsonColumns.Models.ContactDetails", "Contact", b1 =>
                        {
                            b1.Property<int>("AuthorId")
                                .HasColumnType("int");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AuthorId");

                            b1.ToTable("Authors");

                            b1.ToJson("Contact");

                            b1.WithOwner()
                                .HasForeignKey("AuthorId");

                            b1.OwnsOne("JsonColumns.Models.Address", "Address", b2 =>
                                {
                                    b2.Property<int>("ContactDetailsAuthorId")
                                        .HasColumnType("int");

                                    b2.Property<string>("City")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Country")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Postcode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Street")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ContactDetailsAuthorId");

                                    b2.ToTable("Authors");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactDetailsAuthorId");
                                });

                            b1.Navigation("Address");
                        });

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("JsonColumns.Models.Commit", b =>
                {
                    b.HasOne("JsonColumns.Models.PostUpdate", null)
                        .WithMany("Commits")
                        .HasForeignKey("PostUpdateId");
                });

            modelBuilder.Entity("JsonColumns.Models.Post", b =>
                {
                    b.HasOne("JsonColumns.Models.Author", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId");

                    b.HasOne("JsonColumns.Models.Blog", "Blog")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId");

                    b.HasOne("JsonColumns.Models.PostMetadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataId");

                    b.Navigation("Author");

                    b.Navigation("Blog");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("JsonColumns.Models.PostUpdate", b =>
                {
                    b.HasOne("JsonColumns.Models.PostMetadata", null)
                        .WithMany("Updates")
                        .HasForeignKey("PostMetadataId");
                });

            modelBuilder.Entity("JsonColumns.Models.SearchTerm", b =>
                {
                    b.HasOne("JsonColumns.Models.PostMetadata", null)
                        .WithMany("TopSearches")
                        .HasForeignKey("PostMetadataId");
                });

            modelBuilder.Entity("JsonColumns.Models.Visits", b =>
                {
                    b.HasOne("JsonColumns.Models.PostMetadata", null)
                        .WithMany("TopGeographies")
                        .HasForeignKey("PostMetadataId");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("JsonColumns.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JsonColumns.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonColumns.Models.Author", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("JsonColumns.Models.Blog", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("JsonColumns.Models.PostMetadata", b =>
                {
                    b.Navigation("TopGeographies");

                    b.Navigation("TopSearches");

                    b.Navigation("Updates");
                });

            modelBuilder.Entity("JsonColumns.Models.PostUpdate", b =>
                {
                    b.Navigation("Commits");
                });
#pragma warning restore 612, 618
        }
    }
}
